name: Check Issue Assignee CLA
on:
  pull_request_target:
    types:
      - opened
      - reopened
  issues:
    types:
      - assigned
permissions: read-all
jobs:
  check-cla:
    runs-on: ubuntu-24.04
    permissions:
      pull-requests: write
      issues: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      - name: Install Dependencies
        run: npm install googleapis google-auth-library
      - name: Check CLA signature
        id: check-cla
        uses: actions/github-script@v6
        env:
          SHEETS_CRED: '${{ secrets.SHEETS_CRED }}'
          SPREADSHEET_ID: '${{ secrets.SPREADSHEET_ID }}'
          USERNAME: '${{ github.event.pull_request.user.login || github.event.assignee.login }}'
        with:
          script: |
            try {
              console.log("Starting CLA check...");
              # const sheetsCredRaw = Buffer.from(process.env.SHEETS_CRED, 'base64').toString();
              const sheetsCredRaw = process.env.SHEETS_CRED
              console.log("SHEETS_CRED length:", sheetsCredRaw.length); // Debug length without showing content
              
              let sheetsCredJson;
              try {
                sheetsCredJson = JSON.parse(sheetsCredRaw);
                console.log("SHEETS_CRED parsed successfully");
              } catch (parseError) {
                console.error("Failed to parse SHEETS_CRED:", parseError.message);
                console.log("First 10 chars:", sheetsCredRaw.substring(0, 10) + "...");
                throw parseError;
              }
              console.log("SHEETS_CRED loaded successfully");
              const username = process.env.USERNAME;            
              console.log(`Checking CLA signature for user: ${username}`);
              
              const { google } = require('googleapis');
              const { JWT } = require('google-auth-library');
              const { OAuth2Client } = require('google-auth-library');
              if (!sheetsCredJson.installed || !sheetsCredJson.installed.client_id || !sheetsCredJson.installed.client_secret || !sheetsCredJson.refresh_token) {
                console.error("SHEETS_CRED is missing required credential fields");
                core.warning("SHEETS_CRED is missing required credential fields");
                core.setOutput('has-signed-cla', 'true');
                return;
              }
              console.log(sheetsCredJson, ' is the sheets credentials');
              const oauth2Client = new OAuth2Client(
                sheetsCredJson.installed.client_id,
                sheetsCredJson.installed.client_secret
              );
              oauth2Client.setCredentials({
                refresh_token: sheetsCredJson.refresh_token
              });

              const sheets = google.sheets({ version: 'v4', auth: oauth2Client });

              console.log(`Fetching data from spreadsheet ID: ${process.env.SPREADSHEET_ID}`);
              const response = await sheets.spreadsheets.values.get({
                spreadsheetId: process.env.SPREADSHEET_ID,
                range: 'Usernames!A:A',
              });
              if(!response) {
                console.log("No response from Google Sheets API");
                core.setOutput('has-signed-cla', 'false');
                return;
              }
              if (!response.data.values) {
                console.log("No values found in spreadsheet");
                core.setOutput('has-signed-cla', 'false');
                return;
              }

              const lowercaseUsername = username.toLowerCase();
              const hasSignedCla = response.data.values.some(row => 
                row[0] && row[0].toLowerCase() === lowercaseUsername
              );
              
              console.log(`User ${username} has ${hasSignedCla ? '' : 'not '}signed the CLA`);
              core.setOutput('has-signed-cla', hasSignedCla ? 'true' : 'false');
              
            } catch (error) {
              console.error("Error during CLA verification:", error);
              core.warning(`CLA check failed: ${error.message}`);
              // Don't fail the workflow on error, default to allowing the contribution
              core.setOutput('has-signed-cla', 'true');
            }

      - name: Remove assignee and notify if CLA not signed
        if: steps.check-cla.outputs.has-signed-cla == 'false'
        uses: actions/github-script@v6
        with:
          script: |
            // Determine if we're handling a PR or an issue
            const isPullRequest = !!context.payload.pull_request;
            const isIssue = !!context.payload.issue;
            const assignee = context.payload.assignee;
            let targetNumber, assigneeLogin, commentBody;
            
            if (isIssue && context.payload.assignee) {
              const issue = context.payload.issue;
              const assignee = context.payload.assignee;
              if (!issue) {
                core.setFailed('Invalid issue payload');
                return;
              }

              const linkToCla = '[here](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#setting-things-up)';
              commentBody = `Hi @${assignee.login}, you need to sign the CLA before you can get assigned to issues. Follow the instructions ${linkToCla} to get started. I am unassigning you for now, feel free to assign yourself once you have signed the CLA. Thanks!`;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: commentBody
              });
              
              await github.rest.issues.removeAssignees({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                assignees: [assignee.login]
              });
              
              console.log(`Removed assignee ${assignee.login} from issue #${issue.number} due to unsigned CLA`);

            } else if (isPullRequest) {
              // Handle pull request
              const pr = context.payload.pull_request;
              if (!pr) {
                core.setFailed('Invalid pull request payload');
                return;
              }
              console.log(`Pull request #${pr.number} opened by @${pr.user.login}`);
              const linkToCla = '[here](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#setting-things-up)';
              commentBody = `Hi @${pr.user.login}, you need to sign the CLA before we can accept your pull request. Follow the instructions ${linkToCla} to get started. Thanks!`;
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: commentBody
              });

              console.log(`Commented on PR #${pr.number} due to unsigned CLA`);
            } else {
              core.setFailed('Unknown event type or missing context');
            }

      - name: Report failure if failed on oppia/oppia develop branch
        if: ${{ failure() && github.event_name == 'push' && github.repository == 'oppia/oppia' && github.ref == 'refs/heads/develop' }}
        uses: ./.github/actions/send-webhook-notification
        with:
          message: "Signed CLA checker failed on the upstream develop branch."
          webhook-url: ${{ secrets.BUILD_FAILURE_ROOM_WEBHOOK_URL }}
